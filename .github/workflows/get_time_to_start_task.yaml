name: Track Issue Transitions

on:
  project_card:
    types:
      - created
      - moved
  
  # adding a workflow_dispatch event to trigger the workflow manually
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  track_time:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check Issue Transition
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // For workflow_dispatch event, we don't have project_card info
              if (context.eventName === 'workflow_dispatch') {
                console.log("Workflow triggered manually. Exiting as there's no card to process.");
                return;
              }

              // Extract issue information
              const contentUrl = context.payload.project_card.content_url;
              
              // Check if this card is linked to an issue
              if (!contentUrl) {
                console.log("This card doesn't appear to be linked to an issue");
                return;
              }
              
              const issueNumber = contentUrl.split('/').pop();
              const columnName = context.payload.project_card.column_name;
              
              console.log(`Processing card for issue #${issueNumber} in column "${columnName}"`);
              
              // If moved to "Todo", add a comment recording the start time
              if (columnName === "Todo") {
                const timeNow = new Date().toISOString();
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `Issue added to "Todo" at ${timeNow}. [TIMESTAMP:${timeNow}]`
                });
                
                console.log(`Added "Todo" timestamp for issue #${issueNumber}`);
              }
              // If moved to "In Progress", calculate elapsed time
              else if (columnName === "In Progress") {
                // Get issue comments to find the timestamp
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // Find the most recent "Todo" timestamp
                let startTimeComment = null;
                for (const comment of comments.data.reverse()) {
                  if (comment.body.includes("[TIMESTAMP:")) {
                    startTimeComment = comment;
                    break;
                  }
                }
                
                if (startTimeComment) {
                  const timestampMatch = startTimeComment.body.match(/\[TIMESTAMP:(.*?)\]/);
                  if (timestampMatch) {
                    const startTime = new Date(timestampMatch[1]);
                    const timeNow = new Date();
                    
                    // Calculate elapsed time
                    const elapsedTime = timeNow - startTime;
                    const elapsedHours = Math.floor(elapsedTime / (1000 * 60 * 60));
                    const elapsedMinutes = Math.floor((elapsedTime % (1000 * 60 * 60)) / (1000 * 60));
                    
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: `Issue moved to "In Progress". Time spent in "Todo": ${elapsedHours}h ${elapsedMinutes}m.`
                    });
                    
                    console.log(`Added elapsed time comment for issue #${issueNumber}`);
                  }
                } else {
                  console.log(`No start timestamp found for issue #${issueNumber}`);
                }
              }
            } catch (error) {
              console.error("Error in workflow:", error.message);
            }