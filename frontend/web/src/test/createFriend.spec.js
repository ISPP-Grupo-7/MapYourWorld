// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Friend Management Tests', function() {
  jest.setTimeout(90000);
  let driver
  let vars
  
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  
  afterEach(async function() {
    await driver.quit();
  })
  
  it('should create a friend connection between two users', async function() {
    await driver.get("http://localhost:8081/")
    await driver.manage().window().setRect({ width: 1936, height: 1066 })
    await driver.findElement(By.css(".r-borderColor-1wr2p1e > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".input-container:nth-child(1) input")).click()
    await driver.findElement(By.css(".input-container:nth-child(1) input")).sendKeys("user1@gmail.com")
    await driver.findElement(By.css(".input-container:nth-child(2) input")).click()
    await driver.findElement(By.css(".input-container:nth-child(2) input")).sendKeys("user12345*")
    await driver.findElement(By.css("div:nth-child(3) > button")).click()
    
    await driver.wait(until.elementLocated(By.css(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk")), 10000);
    
    await driver.findElement(By.css(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".css-view-175oi2r:nth-child(7) > .css-text-146c3p1")).click()
    
    await driver.findElement(By.css(".r-borderColor-1yb55fl:nth-child(3) > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".css-textinput-11aywtz")).click()
    await driver.findElement(By.css(".css-textinput-11aywtz")).sendKeys("user2")
    await driver.findElement(By.css(".r-marginBottom-6gpygo")).click()
    await driver.findElement(By.css(".r-paddingBlock-11f147o > .css-text-146c3p1")).click()
    
    
    await driver.findElement(By.css(".css-view-175oi2r:nth-child(4) > .css-view-175oi2r > .css-view-175oi2r > .css-view-175oi2r > .css-view-175oi2r > .css-view-175oi2r > .css-view-175oi2r > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".css-view-175oi2r:nth-child(5) > .css-text-146c3p1")).click()
    
    await driver.wait(until.elementLocated(By.css(".r-borderColor-1wr2p1e > .css-text-146c3p1")), 10000);
    
    await driver.findElement(By.css(".r-borderColor-1wr2p1e > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".input-container:nth-child(1) input")).click()
    await driver.findElement(By.css(".input-container:nth-child(1) input")).sendKeys("user2@gmail.com")
    await driver.findElement(By.css(".input-container:nth-child(2) input")).click()
    await driver.findElement(By.css(".input-container:nth-child(2) input")).sendKeys("user12345*")
    await driver.findElement(By.css("div:nth-child(3) > button")).click()
    
    await driver.wait(until.elementLocated(By.css(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk")), 10000);
    
    await driver.findElement(By.css(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".css-view-175oi2r:nth-child(7) > .css-text-146c3p1")).click()
    
    await driver.findElement(By.css(".r-borderColor-1yb55fl:nth-child(2) > .css-text-146c3p1")).click()
    await driver.findElement(By.css(".r-paddingBlock-11f147o > .r-color-jwli3a")).click()
    
    await driver.findElement(By.css(".r-borderColor-1yb55fl:nth-child(1) > .css-text-146c3p1")).click()
    
    await driver.sleep(2000);
    
    try {
      const friendElements = await driver.findElements(By.css(".friends-list .friend-item"));
      
      if (friendElements.length === 0) {
        const alternativeFriendElements = await driver.findElements(By.css("[data-testid='friend-item'], .friend-item, .friend-entry"));
        
        let user1Found = false;
        for (let i = 0; i < alternativeFriendElements.length; i++) {
          const text = await alternativeFriendElements[i].getText();
          if (text.includes("user1")) {
            user1Found = true;
            break;
          }
        }
        assert(user1Found, "User1 should appear in User2's friends list (using alternative selector)");
      } else {
        let user1Found = false;
        for (let i = 0; i < friendElements.length; i++) {
          const text = await friendElements[i].getText();
          if (text.includes("user1")) {
            user1Found = true;
            break;
          }
        }
        assert(user1Found, "User1 should appear in User2's friends list");
      }
    } catch (error) {
      const pageSource = await driver.getPageSource();
      assert(pageSource.includes("user1"), "User1 should appear somewhere on the friends page");
    }
  })
})