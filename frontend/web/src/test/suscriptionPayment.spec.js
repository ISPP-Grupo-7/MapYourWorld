// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('subscriptionPayment', function() {
  jest.setTimeout(90000); 
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('subscriptionPayment', async function() {
    try {
      // Navigate to site
      await driver.get("http://localhost:8081/")
      await driver.manage().window().setRect({ width: 1936, height: 1066 })
      console.log("Page loaded")
      
      // Click register button
      await driver.findElement(By.css(".r-backgroundColor-slr29l")).click()
      console.log("Clicked register button")
      
      // Fill registration form
      await driver.findElement(By.css(".input-container:nth-child(1) input")).click()
      await driver.findElement(By.css(".input-container:nth-child(1) input")).sendKeys("fali")
      await driver.findElement(By.css(".input-container:nth-child(2) input")).sendKeys("fali")
      await driver.findElement(By.css(".input-container:nth-child(3) input")).sendKeys("fali23")
      await driver.findElement(By.css(".input-container:nth-child(5) input")).click()
      await driver.findElement(By.css(".input-container:nth-child(5) input")).sendKeys("fali23@mail.com")
      await driver.findElement(By.css(".input-container:nth-child(6) input")).sendKeys("Fali33$33")
      console.log("Form filled")
      
      // Handle terms and conditions
      await driver.findElement(By.css(".terms-link")).click()
      console.log("Clicked terms link")
      
      // Wait for terms modal to appear
      await driver.wait(until.elementLocated(By.css(".sc-jbAkgO")), 5000);
      
      // Find the scrollable element (the SLA container)
      const slaContainer = await driver.findElement(By.css(".sc-jbAkgO"));
      
      // Scroll to the bottom of the container with JavaScript
      await driver.executeScript("arguments[0].scrollTop = arguments[0].scrollHeight", slaContainer);
      
      // As a backup, try the keyboard approach (press End key)
      await slaContainer.sendKeys(Key.END);
      
      // Wait a moment for the scroll to complete
      await driver.sleep(1000);
      
      // Now click the accept button
      await driver.findElement(By.css(".sc-cSaEAk")).click()
      console.log("Accepted terms")
      
      // Complete registration
      await driver.findElement(By.css("button:nth-child(8)")).click()
      await driver.sleep(3000);
      console.log("Submitted registration")
      
      // Complete registration navigation - FIX FOR OBSCURED BUTTON
      await driver.wait(until.elementLocated(By.css("button:nth-child(3)")), 5000);
      try {
        await driver.findElement(By.css("button:nth-child(3)")).click()
      } catch (error) {
        console.log("Direct click failed, trying JavaScript click:", error.message);
        const button = await driver.findElement(By.css("button:nth-child(3)"));
        await driver.executeScript("arguments[0].click();", button);
      }
      await driver.sleep(3000);
      console.log("Registration complete")
      
      // Enhanced hamburger menu navigation
      try {
        console.log("Looking for hamburger menu button...");
        
        // Try to find the hamburger menu using various methods
        let menuButton = null;
        const menuSelectors = [
          ".hamburger-button", 
          ".menu-icon",
          ".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk > .css-text-146c3p1",
          "button.navbar-toggler",
          "[aria-label='menu']"
        ];
        
        for (const selector of menuSelectors) {
          try {
            const elements = await driver.findElements(By.css(selector));
            if (elements.length > 0) {
              menuButton = elements[0];
              console.log(`Found menu button with selector: ${selector}`);
              break;
            }
          } catch (err) {
            // Continue to next selector
          }
        }
        
        if (!menuButton) {
          // Try by XPath as fallback
          try {
            menuButton = await driver.findElement(By.xpath("//*[contains(text(), '☰')] | //button[contains(@class, 'hamburger')]"));
            console.log("Found menu button by XPath");
          } catch (err) {
            // Fallback to elements in header
            const headerButtons = await driver.findElements(By.css("header button"));
            if (headerButtons.length > 0) {
              menuButton = headerButtons[0];
              console.log("Using first header button as menu");
            }
          }
        }
        
        // Click the menu button if found
        if (menuButton) {
          await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", menuButton);
          await driver.sleep(1000);
          await driver.executeScript("arguments[0].click();", menuButton);
          await driver.sleep(2000);
          console.log("Clicked hamburger menu button");
        } else {
          console.log("Could not find hamburger menu, trying direct URL navigation");
          await driver.get("http://localhost:8081/payment");
          await driver.sleep(3000);
        }
        
        // Look for Suscripción menu item
        if (menuButton) {
          console.log("Looking for Suscripción menu item...");
          
          // First attempt: Direct text search for Suscripción
          try {
            const menuElements = await driver.findElements(By.xpath("//*[contains(text(), 'Suscripción')]"));
            if (menuElements.length > 0) {
              console.log("Found Suscripción by text content");
              await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", menuElements[0]);
              await driver.sleep(1000);
              await driver.executeScript("arguments[0].click();", menuElements[0]);
              await driver.sleep(2000);
            } else {
              throw new Error("No menu item with Suscripción text found");
            }
          } catch (error) {
            console.log("Text search failed:", error.message);
            
            // Second attempt: Click on the menu item by position (typically 5th or 6th item)
            try {
              const menuItems = await driver.findElements(By.css(".menuItem, .css-text-146c3p1"));
              console.log(`Found ${menuItems.length} potential menu items`);
              
              // Display all menu items text for debugging
              for (let i = 0; i < menuItems.length; i++) {
                try {
                  const text = await menuItems[i].getText();
                  console.log(`Menu item ${i+1}: "${text}"`);
                  
                  if (text.includes("Suscripción") || text.includes("Payment") || text.includes("Subscription")) {
                    console.log(`Found match at position ${i+1}`);
                    await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", menuItems[i]);
                    await driver.sleep(1000);
                    await driver.executeScript("arguments[0].click();", menuItems[i]);
                    await driver.sleep(2000);
                    console.log("Clicked subscription menu item");
                    break;
                  }
                } catch (e) {
                  console.log(`Error getting text for item ${i+1}:`, e.message);
                }
              }
              
              // If we still haven't found it, try position 5 or 6
              if (menuItems.length >= 6) {
                const targetIndex = 5; // 6th item (0-based index is 5)
                console.log(`Trying menu item at position 6 (index ${targetIndex})`);
                await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", menuItems[targetIndex]);
                await driver.sleep(1000);
                await driver.executeScript("arguments[0].click();", menuItems[targetIndex]);
                await driver.sleep(2000);
              } else if (menuItems.length >= 5) {
                const targetIndex = 4; // 5th item
                console.log(`Trying menu item at position 5 (index ${targetIndex})`);
                await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", menuItems[targetIndex]);
                await driver.sleep(1000);
                await driver.executeScript("arguments[0].click();", menuItems[targetIndex]);
                await driver.sleep(2000);
              }
            } catch (menuItemError) {
              console.log("Menu item selection failed:", menuItemError.message);
            }
          }
        }
      } catch (navError) {
        console.log("Navigation error:", navError.message);
        // Direct URL navigation as final fallback
        console.log("Trying direct URL navigation to payment page");
        await driver.get("http://localhost:8081/payment");
        await driver.sleep(3000);
      }
      
      console.log("Reached subscription page")
      
      // ====== PAYMENT SECTION ======
      try {
        console.log("Starting payment process...")
        // Wait for and find the payment button
        await driver.wait(until.elementLocated(By.css("form > button, button.payment-button, .subscription-button")), 7000);
        const formButton = await driver.findElement(By.css("form > button, button.payment-button, .subscription-button"));
        await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", formButton);
        await driver.sleep(1000);
        
        // Find and click the card element to focus the payment form
        try {
          console.log("Looking for payment form elements...")
          const cardElements = await driver.findElements(By.css("h2, .card-element, .stripe-element"));
          if (cardElements.length > 0) {
            await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", cardElements[0]);
            await driver.executeScript("arguments[0].click();", cardElements[0]);
            await driver.sleep(1000);
          }
        } catch (elemError) {
          console.log("Card element interaction failed:", elemError.message);
        }
        
        // Handle iframe for credit card input
        console.log("Switching to payment iframe...")
        await driver.wait(until.elementLocated(By.css("iframe")), 7000);
        const frames = await driver.findElements(By.css("iframe"));
        console.log(`Found ${frames.length} iframes`);
        
        if (frames.length > 1) {
          await driver.switchTo().frame(1);
        } else if (frames.length > 0) {
          await driver.switchTo().frame(0);
        }
        
        // Fill credit card details
        console.log("Filling card details...")
        await driver.wait(until.elementLocated(By.name("cardnumber")), 7000);
        await driver.findElement(By.name("cardnumber")).click();
        await driver.findElement(By.name("cardnumber")).sendKeys("4242 4242 4242 4242");
        await driver.findElement(By.name("exp-date")).sendKeys("07 / 29");
        await driver.findElement(By.name("cvc")).sendKeys("213");
        await driver.findElement(By.name("postal")).sendKeys("41005");
        
        // Switch back to default content
        await driver.switchTo().defaultContent();
        
        // Submit payment
        console.log("Submitting payment...")
        await driver.executeScript("arguments[0].click();", formButton);
        await driver.sleep(5000);
        
        console.log("Test completed successfully");
      } catch (paymentError) {
        console.log("Payment section failed:", paymentError.message);
      }
      
    } catch (error) {
      console.log("Test failed:", error.message);
    }
  })
})