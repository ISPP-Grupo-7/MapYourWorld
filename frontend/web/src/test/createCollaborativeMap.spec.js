// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createCollaborativeMap', function() {
  jest.setTimeout(120000);
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  
  it('createCollaborativeMap', async function() {
    // Navigate to application
    await driver.get("http://localhost:8081/")
    await driver.manage().window().setRect({ width: 1936, height: 1066 })
    
    // Login process
    await driver.findElement(By.css(".r-borderColor-1wr2p1e")).click()
    await driver.findElement(By.css(".input-container:nth-child(1) input")).click()
    await driver.findElement(By.css(".input-container:nth-child(1) input")).sendKeys("user1@gmail.com")
    await driver.findElement(By.css(".input-container:nth-child(2) input")).click()
    await driver.findElement(By.css(".input-container:nth-child(2) input")).sendKeys("user12345*")
    await driver.findElement(By.css("div:nth-child(3) > button")).click()
    
    // Wait for login to complete
    await driver.wait(until.elementLocated(By.css(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk")), 10000);
    
    // Función mejorada de click con soporte para XPath
    const clickElement = async (selector, isXpath = false, timeout = 5000) => {
      const locator = isXpath ? By.xpath(selector) : By.css(selector);
      
      try {
        // Esperar a que el elemento esté disponible
        const element = await driver.wait(until.elementLocated(locator), timeout);
        
        // Hacer scroll hacia el elemento
        await driver.executeScript("arguments[0].scrollIntoView(true);", element);
        await driver.sleep(500);
        
        // Intentar click directo primero
        try {
          await element.click();
        } catch (error) {
          // Si falla, usar JavaScript click
          await driver.executeScript("arguments[0].click();", element);
        }
      } catch (error) {
        console.log(`Error al hacer click en ${selector}: ${error.message}`);
        throw error;
      }
    };
    
    // Abrir el menú hamburguesa
    await clickElement(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk > .css-text-146c3p1");
    await driver.sleep(1000);
    
    // Navegar a mapas colaborativos usando XPath (busca el texto exacto)
    console.log("Buscando el elemento de Mapas Colaborativos...");
    await clickElement("//div[contains(text(), 'Mapas Colaborativos')] | //span[contains(text(), 'Mapas Colaborativos')] | //p[contains(text(), 'Mapas Colaborativos')]", true, 10000);
    await driver.sleep(2000);
    
    // Buscar el botón para crear nuevo mapa colaborativo
    try {
      // Intentar varias posibilidades para el botón de crear mapa
      const createButtonOptions = [
        "//button[contains(text(), 'Crear')] | //div[contains(text(), 'Crear')]",
        "//button[contains(@class, 'create')] | //div[contains(@class, 'create')]",
        ".r-borderRadius-1h84pjw",
        ".create-button",
        "button.add-map"
      ];
      
      let buttonFound = false;
      for (const buttonSelector of createButtonOptions) {
        try {
          const isXPath = buttonSelector.startsWith("//");
          await clickElement(buttonSelector, isXPath, 3000);
          buttonFound = true;
          console.log(`Botón encontrado con selector: ${buttonSelector}`);
          break;
        } catch (e) {
          console.log(`No se encontró botón con selector: ${buttonSelector}`);
        }
      }
      
      if (!buttonFound) {
        throw new Error("No se pudo encontrar el botón para crear un mapa colaborativo");
      }
    } catch (error) {
      console.error("Error al buscar botón de crear mapa:", error);
      throw error;
    }
    
    await driver.sleep(2000);
    
    // ==========================================
    // MEJORA: Buscar y hacer clic en el botón premium con múltiples estrategias
    // ==========================================
    console.log("Intentando acceder a la suscripción premium...");
    
    // Opciones de selectores para el botón premium
    const premiumOptions = [
      // XPath primero (más fiable para buscar por texto)
      ["//button[contains(text(), 'Premium')]", true],
      ["//div[contains(text(), 'Premium')]", true],
      ["//span[contains(text(), 'Premium')]", true],
      ["//button[contains(text(), 'Mejorar')]", true],
      ["//div[contains(text(), 'Mejorar')]", true],
      ["//p[contains(text(), 'Mejorar')]", true],
      ["//button[contains(text(), 'Comprar')]", true],
      ["//div[contains(text(), 'Comprar')]", true],
      
      // CSS después
      [".r-marginInline-8dgmk1 > .r-color-jwli3a", false],
      [".r-marginInline-8dgmk1", false],
      [".r-color-jwli3a", false],
      ["button.premium-button", false],
      ["div.premium-button", false]
    ];
    
    let premiumButtonFound = false;
    for (const [selector, isXPath] of premiumOptions) {
      try {
        console.log(`Intentando selector premium: ${selector}`);
        await clickElement(selector, isXPath, 3000);
        premiumButtonFound = true;
        console.log(`Botón premium encontrado con selector: ${selector}`);
        break;
      } catch (e) {
        console.log(`No se encontró botón premium con selector: ${selector}`);
      }
    }
    
    if (!premiumButtonFound) {
      console.log("No se encontró ningún botón premium. Buscando cualquier botón visible...");
      try {
        // Último recurso: buscar botones o elementos clicables y probarlos
        const buttons = await driver.findElements(By.css("button, .r-cursor-1loqt21, .r-color-jwli3a"));
        console.log(`Se encontraron ${buttons.length} botones/elementos clicables`);
        
        for (let i = 0; i < buttons.length; i++) {
          try {
            await driver.executeScript("arguments[0].scrollIntoView(true);", buttons[i]);
            await driver.sleep(500);
            
            // Obtener texto del botón para logging
            let buttonText;
            try {
              buttonText = await buttons[i].getText();
            } catch (e) {
              buttonText = "texto no disponible";
            }
            
            console.log(`Intentando hacer clic en botón ${i}: "${buttonText}"`);
            await driver.executeScript("arguments[0].click();", buttons[i]);
            
            // Verificar si nos llevó a la página de pago
            await driver.sleep(1000);
            const currentUrl = await driver.getCurrentUrl();
            if (currentUrl.includes("payment") || currentUrl.includes("premium") || currentUrl.includes("subscription")) {
              console.log("Éxito! Navegó a la página de pago");
              premiumButtonFound = true;
              break;
            }
          } catch (err) {
            console.log(`Error al hacer clic en botón ${i}: ${err.message}`);
          }
        }
      } catch (e) {
        console.log("Error buscando botones alternativos:", e.message);
      }
    }
    
    await driver.sleep(2000);
    
    // Completar el pago
    try {
      await clickElement("button:nth-child(2)");
    } catch (e) {
      console.log("Error al hacer clic en el botón de pago, intentando alternativas...");
      try {
        await clickElement("//button[contains(text(), 'Pagar')] | //button[contains(text(), 'Confirmar')] | //button[contains(text(), 'Continuar')]", true);
      } catch (err) {
        console.log("No se pudo encontrar ningún botón de pago");
      }
    }
    await driver.sleep(2000);
    
    // Manejar alerta si está presente
    try {
      await driver.wait(until.alertIsPresent(), 3000);
      await driver.switchTo().alert().accept();
    } catch (e) {
      // No hay alerta, continuar
    }
    
    // Manejar iframe de Stripe
    try {
      // Encontrar y cambiar al iframe
      await driver.sleep(3000);
      const frames = await driver.findElements(By.css("iframe"));
      console.log(`Se encontraron ${frames.length} iframes`);
      
      if (frames.length > 0) {
        for (let i = 0; i < frames.length; i++) {
          try {
            console.log(`Intentando cambiar al iframe ${i}`);
            await driver.switchTo().frame(i);
            
            // Intentar encontrar el campo de tarjeta
            try {
              await driver.findElement(By.name("cardnumber")).sendKeys("4242 4242 4242 4242");
              await driver.findElement(By.name("exp-date")).sendKeys("0729");
              await driver.findElement(By.name("cvc")).sendKeys("456");
              await driver.findElement(By.name("postal")).sendKeys("41005");
              console.log(`Éxito! Formulario de pago completado en iframe ${i}`);
              break; // Salir del bucle si tenemos éxito
            } catch (cardError) {
              console.log(`No se encontraron campos de tarjeta en iframe ${i}`);
              await driver.switchTo().defaultContent(); // Volver al contenido principal
            }
          } catch (frameError) {
            console.log(`Error cambiando al iframe ${i}: ${frameError.message}`);
          }
        }
        
        await driver.switchTo().defaultContent(); // Asegurarse de volver al contenido principal
      }
    } catch (e) {
      console.log("Error al manejar iframe de pago:", e.message);
      await driver.switchTo().defaultContent();
    }
   
    // Completar pago
    try {
      await clickElement("button:nth-child(2)");
    } catch (e) {
      console.log("Error al confirmar pago, intentando alternativas...");
      try {
        await clickElement("//button[contains(text(), 'Pagar')] | //button[contains(text(), 'Confirmar')] | //button[contains(text(), 'Continuar')]", true);
      } catch (err) {
        console.log("No se pudo encontrar ningún botón de confirmación de pago");
      }
    }
    
    // Esperar a que se procese el pago
    await driver.sleep(8000);
    
    // El resto del test continúa igual...
    // Volver a navegar a mapas colaborativos
    await clickElement(".css-view-175oi2r:nth-child(1) > .r-transitionProperty-1i6wzkk > .css-text-146c3p1");
    await driver.sleep(2000);
    
    await clickElement("//div[contains(text(), 'Mapas Colaborativos')] | //span[contains(text(), 'Mapas Colaborativos')]", true, 10000);
    await driver.sleep(2000);
    
    // Buscar nuevamente el botón para crear mapa
    try {
      const createButtonOptions = [
        "//button[contains(text(), 'Crear')] | //div[contains(text(), 'Crear')]",
        "//button[contains(@class, 'create')] | //div[contains(@class, 'create')]",
        ".r-borderRadius-1h84pjw",
        ".create-button",
        "button.add-map"
      ];
      
      for (const buttonSelector of createButtonOptions) {
        try {
          const isXPath = buttonSelector.startsWith("//");
          await clickElement(buttonSelector, isXPath, 3000);
          console.log(`Botón encontrado con selector: ${buttonSelector}`);
          break;
        } catch (e) {
          console.log(`No se encontró botón con selector: ${buttonSelector}`);
        }
      }
    } catch (error) {
      console.error("Error al buscar botón de crear mapa (segundo intento):", error);
    }
    
    await driver.sleep(2000);
    
    // Rellenar detalles del mapa
    try {
      await driver.findElement(By.css(".css-textinput-11aywtz:nth-child(3)")).sendKeys("Mapa con los colegas");
    } catch (e) {
      // Intento alternativo para encontrar el campo de título
      try {
        await driver.findElement(By.xpath("//input[@placeholder='Título'] | //input[contains(@class, 'title')]")).sendKeys("Mapa con los colegas");
      } catch (innerError) {
        console.log("No se pudo encontrar el campo de título:", innerError.message);
      }
    }
    
    try {
      await driver.findElement(By.css(".r-minHeight-mjyw6")).click();
      await driver.findElement(By.css(".r-minHeight-mjyw6")).sendKeys("Quien menos descubra invita ronda");
    } catch (e) {
      // Intento alternativo para encontrar el campo de descripción
      try {
        await driver.findElement(By.xpath("//textarea | //input[@placeholder='Descripción']")).sendKeys("Quien menos descubra invita ronda");
      } catch (innerError) {
        console.log("No se pudo encontrar el campo de descripción:", innerError.message);
      }
    }
    
    // Seleccionar opción colaborativa
    try {
      await clickElement(".r-alignItems-1awozwy:nth-child(4) > .css-text-146c3p1");
    } catch (e) {
      // Intento alternativo para encontrar la opción colaborativa
      try {
        await clickElement("//div[contains(text(), 'Colaborativo')] | //span[contains(text(), 'Colaborativo')]", true);
      } catch (innerError) {
        console.log("No se pudo seleccionar la opción colaborativa:", innerError.message);
      }
    }
    await driver.sleep(1000);
    
    // Crear el mapa
    try {
      await clickElement(".r-marginInline-8dgmk1 > .r-color-jwli3a");
    } catch (e) {
      // Intento alternativo para encontrar el botón crear
      try {
        await clickElement("//button[contains(text(), 'Crear')] | //div[contains(text(), 'Crear')]", true);
      } catch (innerError) {
        console.log("No se pudo hacer clic en el botón crear:", innerError.message);
      }
    }
    await driver.sleep(5000);
    
    // Ir a la lista de mapas y verificar si nuestro mapa está allí
    try {
      await clickElement(".r-fontSize-1i10wst");
    } catch (e) {
      // Intento alternativo para volver a la lista
      try {
        await clickElement("//div[contains(text(), 'Volver')] | //span[contains(text(), 'Volver')] | //button[contains(text(), 'Volver')]", true);
      } catch (innerError) {
        console.log("No se pudo hacer clic en el botón volver:", innerError.message);
      }
    }
    await driver.sleep(3000);
    
    // Verificar que el mapa fue creado comprobando el source de la página
    const pageSource = await driver.getPageSource();
    assert(pageSource.includes("Mapa con los colegas"), "El mapa colaborativo debería aparecer en la lista");
  })
})