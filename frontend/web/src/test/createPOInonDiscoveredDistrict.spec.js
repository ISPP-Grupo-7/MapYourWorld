// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('createPOI_nonDiscoveredDistrict', function() {
  jest.setTimeout(60000); 
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('createPOI_nonDiscoveredDistrict', async function() {
    try {
      await driver.get("http://localhost:8081/")
      await driver.manage().window().setRect({ width: 899, height: 693 })
      await driver.sleep(2000);
      
      try {
        const closeButtons = await driver.findElements(By.css("button.close, .modal-close, .popup-close"));
        if (closeButtons.length > 0) {
          await driver.executeScript("arguments[0].click();", closeButtons[0]);
          await driver.sleep(500);
        }
      } catch (error) {
        console.log("No popup close buttons found");
      }
      
      console.log("Attempting to click login button...");
      const loginButton = await driver.findElement(By.css(".r-borderColor-1wr2p1e > .css-text-146c3p1"));
      await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", loginButton);
      await driver.sleep(500);
      await driver.executeScript("arguments[0].click();", loginButton);
      await driver.sleep(1000);
      
      await driver.findElement(By.css(".input-container:nth-child(1) input")).sendKeys("user1@gmail.com");
      await driver.findElement(By.css(".input-container:nth-child(2) input")).sendKeys("user12345*");
      
      const submitButton = await driver.findElement(By.css("div:nth-child(3) > button"));
      await driver.executeScript("arguments[0].click();", submitButton);
      
      await driver.sleep(3000);
      
      await driver.wait(until.elementLocated(By.css(".leaflet-container")), 10000);
      await driver.sleep(2000);
      
      console.log("Clicking on map...");
      const mapContainer = await driver.findElement(By.css(".leaflet-container"));
      await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", mapContainer);
      await driver.sleep(1000);
      
      await driver.executeScript(`
        const mapElem = document.querySelector('.leaflet-container');
        if (mapElem) {
          const rect = mapElem.getBoundingClientRect();
          const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: rect.left + 100,
            clientY: rect.top + 100
          });
          mapElem.dispatchEvent(clickEvent);
        }
      `);
      
      await driver.sleep(2000);
      
      try {
        console.log("Looking for dialog buttons...");
        const confirmButtons = await driver.findElements(
          By.xpath("//button[contains(text(), 'Confirm')] | //button[contains(text(), 'OK')] | //button[contains(text(), 'Aceptar')] | //button[contains(text(), 'Proceder')]")
        );
        
        if (confirmButtons.length > 0) {
          console.log("Found a confirm button");
          await driver.executeScript("arguments[0].click();", confirmButtons[0]);
        } else {
          // Try common button selectors
          const buttons = await driver.findElements(By.css(".btn-primary, .confirm-button, button:nth-child(1), button:nth-child(2)"));
          if (buttons.length > 0) {
            console.log("Found a button with common selector");
            await driver.executeScript("arguments[0].click();", buttons[0]);
          } else {
            // Try all buttons and click the first one
            const allButtons = await driver.findElements(By.css("button"));
            if (allButtons.length > 0) {
              console.log(`Found ${allButtons.length} buttons, clicking first one`);
              await driver.executeScript("arguments[0].click();", allButtons[0]);
            }
          }
        }
      } catch (buttonError) {
        console.log("Dialog button interaction failed:", buttonError.message);
      }
      
      await driver.sleep(1500);
      
    } catch (error) {
      console.log("Test failed:", error.message);
    }
  })
})