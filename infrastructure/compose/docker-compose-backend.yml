# Este archivo está comentado para evitar su ejecución
# Para usar este archivo, elimina los comentarios y ejecute `docker-compose -f docker-compose-backend.yml up -d`

# version: '3.8'

# services:
#   # Base de datos
#   postgres:
#     image: postgres:14-alpine
#     container_name: mapyourworld-postgres
#     restart: unless-stopped
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB:-mapyourworld}
#       POSTGRES_USER: ${POSTGRES_USER:-postgres}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./postgres-init:/docker-entrypoint-initdb.d
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Message broker
#   rabbitmq:
#     image: rabbitmq:3-management-alpine
#     container_name: mapyourworld-rabbitmq
#     restart: unless-stopped
#     ports:
#       - "5672:5672"
#       - "15672:15672"
#     environment:
#       RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
#       RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
#     volumes:
#       - rabbitmq_data:/var/lib/rabbitmq
#     healthcheck:
#       test: ["CMD", "rabbitmqctl", "status"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Servicios Backend
#   auth-service:
#     build:
#       context: ../..
#       dockerfile: infrastructure/docker/Dockerfile.auth
#     container_name: mapyourworld-auth
#     restart: unless-stopped
#     depends_on:
#       postgres:
#         condition: service_healthy
#       rabbitmq:
#         condition: service_healthy
#     environment:
#       NODE_ENV: ${NODE_ENV:-production}
#       PORT: 4000
#       DB_HOST: postgres
#       DB_PORT: 5432
#       DB_NAME: ${POSTGRES_DB:-mapyourworld}
#       DB_USER: ${POSTGRES_USER:-postgres}
#       DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#       JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
#       JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
#       RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
#       EMAIL_SERVICE: ${EMAIL_SERVICE:-smtp.example.com}
#       EMAIL_USER: ${EMAIL_USER:-user@example.com}
#       EMAIL_PASSWORD: ${EMAIL_PASSWORD:-password}
#       EMAIL_FROM: ${EMAIL_FROM:-noreply@mapyourworld.com}
#     ports:
#       - "4000:4000"
#     networks:
#       - backend-network

#   user-service:
#     build:
#       context: ../..
#       dockerfile: infrastructure/docker/Dockerfile.user
#     container_name: mapyourworld-user
#     restart: unless-stopped
#     depends_on:
#       postgres:
#         condition: service_healthy
#       rabbitmq:
#         condition: service_healthy
#       auth-service:
#         condition: service_started
#     environment:
#       NODE_ENV: ${NODE_ENV:-production}
#       PORT: 4001
#       DB_HOST: postgres
#       DB_PORT: 5432
#       DB_NAME: ${POSTGRES_DB:-mapyourworld}
#       DB_USER: ${POSTGRES_USER:-postgres}
#       DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#       RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
#       AUTH_SERVICE_URL: http://auth-service:4000
#     ports:
#       - "4001:4001"
#     networks:
#       - backend-network

#   map-service:
#     build:
#       context: ../..
#       dockerfile: infrastructure/docker/Dockerfile.map
#     container_name: mapyourworld-map
#     restart: unless-stopped
#     depends_on:
#       postgres:
#         condition: service_healthy
#       rabbitmq:
#         condition: service_healthy
#       auth-service:
#         condition: service_started
#     environment:
#       NODE_ENV: ${NODE_ENV:-production}
#       PORT: 4002
#       DB_HOST: postgres
#       DB_PORT: 5432
#       DB_NAME: ${POSTGRES_DB:-mapyourworld}
#       DB_USER: ${POSTGRES_USER:-postgres}
#       DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#       RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
#       AUTH_SERVICE_URL: http://auth-service:4000
#       MAP_TILE_SERVER: ${MAP_TILE_SERVER:-https://tile.openstreetmap.org/{z}/{x}/{y}.png}
#       GEOCODING_API_KEY: ${GEOCODING_API_KEY:-your_geocoding_api_key}
#     ports:
#       - "4002:4002"
#     networks:
#       - backend-network

#   notification-service:
#     build:
#       context: ../..
#       dockerfile: infrastructure/docker/Dockerfile.notification
#     container_name: mapyourworld-notification
#     restart: unless-stopped
#     depends_on:
#       postgres:
#         condition: service_healthy
#       rabbitmq:
#         condition: service_healthy
#       auth-service:
#         condition: service_started
#     environment:
#       NODE_ENV: ${NODE_ENV:-production}
#       PORT: 4003
#       DB_HOST: postgres
#       DB_PORT: 5432
#       DB_NAME: ${POSTGRES_DB:-mapyourworld}
#       DB_USER: ${POSTGRES_USER:-postgres}
#       DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#       RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
#       AUTH_SERVICE_URL: http://auth-service:4000
#       EMAIL_SERVICE: ${EMAIL_SERVICE:-smtp.example.com}
#       EMAIL_USER: ${EMAIL_USER:-user@example.com}
#       EMAIL_PASSWORD: ${EMAIL_PASSWORD:-password}
#       EMAIL_FROM: ${EMAIL_FROM:-noreply@mapyourworld.com}
#       PUSH_NOTIFICATION_KEY: ${PUSH_NOTIFICATION_KEY:-your_push_notification_key}
#     ports:
#       - "4003:4003"
#     networks:
#       - backend-network

#   social-service:
#     build:
#       context: ../..
#       dockerfile: infrastructure/docker/Dockerfile.social
#     container_name: mapyourworld-social
#     restart: unless-stopped
#     depends_on:
#       postgres:
#         condition: service_healthy
#       rabbitmq:
#         condition: service_healthy
#       auth-service:
#         condition: service_started
#       user-service:
#         condition: service_started
#     environment:
#       NODE_ENV: ${NODE_ENV:-production}
#       PORT: 4004
#       DB_HOST: postgres
#       DB_PORT: 5432
#       DB_NAME: ${POSTGRES_DB:-mapyourworld}
#       DB_USER: ${POSTGRES_USER:-postgres}
#       DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
#       RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672
#       AUTH_SERVICE_URL: http://auth-service:4000
#       USER_SERVICE_URL: http://user-service:4001
#     ports:
#       - "4004:4004"
#     networks:
#       - backend-network

#   api-gateway:
#     build:
#       context: ../..
#       dockerfile: infrastructure/docker/Dockerfile.gateway
#     container_name: mapyourworld-gateway
#     restart: unless-stopped
#     depends_on:
#       auth-service:
#         condition: service_started
#       user-service:
#         condition: service_started
#       map-service:
#         condition: service_started
#       notification-service:
#         condition: service_started
#       social-service:
#         condition: service_started
#     environment:
#       NODE_ENV: ${NODE_ENV:-production}
#       PORT: 3000
#       AUTH_SERVICE_URL: http://auth-service:4000
#       USER_SERVICE_URL: http://user-service:4001
#       MAP_SERVICE_URL: http://map-service:4002
#       NOTIFICATION_SERVICE_URL: http://notification-service:4003
#       SOCIAL_SERVICE_URL: http://social-service:4004
#       CORS_ORIGIN: ${CORS_ORIGIN:-*}
#       JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key}
#     ports:
#       - "3000:3000"
#     networks:
#       - backend-network

# networks:
#   backend-network:
#     driver: bridge

# volumes:
#   postgres_data:
#   rabbitmq_data: 